package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"os"
	"strings"
	"time"

	"github.com/joho/godotenv"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

const datesFile = "dates.json"

type ChatDates struct {
	ChatID int64    `json:"chat_id"`
	Dates  []string `json:"dates"`
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ .env —Ñ–∞–π–ª–∞")
	}

	telegram_token := os.Getenv("TELEGRAM_TOKEN")
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
	b, err := bot.New(telegram_token)
	if err != nil {
		log.Fatal(err)
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
	b.RegisterHandler(bot.HandlerTypeMessageText, "/murmansk", bot.MatchTypeExact, murmanskHandler)
	b.RegisterHandler(bot.HandlerTypeMessageText, "/setdate", bot.MatchTypePrefix, setDateHandler)
	b.RegisterHandler(bot.HandlerTypeMessageText, "/dates", bot.MatchTypeExact, listDatesHandler)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
	b.Start(context.Background())
}

func murmanskHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
	chatDates := loadDates()

	// –ò—â–µ–º –¥–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
	var targetDate time.Time
	for _, chat := range chatDates {
		if chat.ChatID == update.Message.Chat.ID && len(chat.Dates) > 0 {
			// –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é –¥–∞—Ç—É –∏–∑ —Å–ø–∏—Å–∫–∞
			targetDate, _ = time.Parse("2006-01-02", chat.Dates[0])
			break
		}
	}

	if targetDate.IsZero() {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–î–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /setdate YYYY-MM-DD –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–∞—Ç—ã.",
		})
		return
	}

	// –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
	now := time.Now()

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç—ã
	duration := targetDate.Sub(now)

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π, —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç
	days := int(duration.Hours()) / 24
	hours := int(duration.Hours()) % 24
	minutes := int(duration.Minutes()) % 60

	// –°–ª—É—á–∞–π–Ω—ã–µ —Ñ—Ä–∞–∑—ã
	funnyPhrases := []string{
		"–î–∞–º—ã –∏ –≥–æ—Å–ø–æ–¥–∞, –Ω–∞ –≤–∞—à–∏—Ö —ç–∫—Ä–∞–Ω–∞—Ö ‚Äî –∫–æ—Å–º–∏—á–µ—Å–∫–∏–π —Ä–µ–π—Å, –∏ –≤—Ä–µ–º—è –¥–æ —Å—Ç–∞—Ä—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç... üöÄ‚è≥",
		"–ó–∞–±—É–¥—å—Ç–µ –≤—Å–µ, —á—Ç–æ –≤—ã –∑–Ω–∞–ª–∏ –æ –≤—Ä–µ–º–µ–Ω–∏, –≤–æ—Ç –æ–Ω–æ ‚Äî –≤–∞—à–µ –±—É–¥—É—â–µ–µ! üîÆ‚ú®",
		"–°–µ–∫—É–Ω–¥—ã —Ç–∞—é—Ç, –∫–∞–∫ —Å–Ω–µ–≥ –Ω–∞ —Å–æ–ª–Ω—Ü–µ, –¥–æ —Å–æ–±—ã—Ç–∏—è –æ—Å—Ç–∞–ª–∞—Å—å —Å–æ–≤—Å–µ–º –º–∞–ª–æ—Å—Ç—å... ‚ùÑÔ∏è‚òÄÔ∏è",
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Ñ—Ä–∞–∑—ã
	rand.Seed(time.Now().Unix())
	randomPhrase := funnyPhrases[rand.Intn(len(funnyPhrases))]

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	message := fmt.Sprintf("%s\n**%d –¥–Ω–µ–π, %d —á–∞—Å–æ–≤, %d –º–∏–Ω—É—Ç.**", randomPhrase, days, hours, minutes)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		Text:      message,
		ParseMode: "Markdown",
	})
}

func setDateHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
	parts := strings.Split(update.Message.Text, " ")
	if len(parts) < 2 {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /setdate YYYY-MM-DD",
		})
		return
	}

	date := parts[1]
	_, err := time.Parse("2006-01-02", date)
	if err != nil {
		b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: update.Message.Chat.ID,
			Text:   "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD",
		})
		return
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞—Ç—ã
	chatDates := loadDates()

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
	found := false
	for i, chat := range chatDates {
		if chat.ChatID == update.Message.Chat.ID {
			chatDates[i].Dates = append(chatDates[i].Dates, date)
			found = true
			break
		}
	}

	if !found {
		chatDates = append(chatDates, ChatDates{
			ChatID: update.Message.Chat.ID,
			Dates:  []string{date},
		})
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
	saveDates(chatDates)

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–î–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
	})
}

func listDatesHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞
	chatDates := loadDates()

	// –ò—â–µ–º –¥–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
	for _, chat := range chatDates {
		if chat.ChatID == update.Message.Chat.ID {
			if len(chat.Dates) == 0 {
				b.SendMessage(ctx, &bot.SendMessageParams{
					ChatID: update.Message.Chat.ID,
					Text:   "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç.",
				})
				return
			}

			message := "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã:\n"
			for _, date := range chat.Dates {
				message += fmt.Sprintf("- %s\n", date)
			}

			b.SendMessage(ctx, &bot.SendMessageParams{
				ChatID: update.Message.Chat.ID,
				Text:   message,
			})
			return
		}
	}

	b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID: update.Message.Chat.ID,
		Text:   "–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞—Ç.",
	})
}

func loadDates() []ChatDates {
	file, err := os.Open(datesFile)
	if err != nil {
		if os.IsNotExist(err) {
			return []ChatDates{}
		}
		log.Fatal(err)
	}
	defer file.Close()

	var chatDates []ChatDates
	err = json.NewDecoder(file).Decode(&chatDates)
	if err != nil {
		log.Fatal(err)
	}

	return chatDates
}

func saveDates(chatDates []ChatDates) {
	file, err := os.Create(datesFile)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()

	err = json.NewEncoder(file).Encode(chatDates)
	if err != nil {
		log.Fatal(err)
	}
}
